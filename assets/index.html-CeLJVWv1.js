import{_ as e,c as s,a as i,o as p}from"./app-DNIo-6hg.js";const r="/images/middleware/redis/Redis%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/01/SimpleKV%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%86%85%E9%83%A8%E6%9E%B6%E6%9E%84.png",n="/images/middleware/redis/Redis%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/01/SimpleKV%E5%88%B0Redis.png",t={};function o(h,a){return p(),s("div",null,a[0]||(a[0]=[i('<h2 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h2><p>Redis是键值数据库</p><h2 id="学习方法" tabindex="-1"><a class="header-anchor" href="#学习方法"><span>学习方法</span></a></h2><p>先建立 <strong>系统观</strong> ，想要深入理解和优化 Redis，就必须对它的 <strong>总体架构</strong> 和 <strong>关键模块</strong> 有一个全局的认知，然后再深入到具体的技术点。</p><h2 id="构建一个简单的键值数据库-simplekv" tabindex="-1"><a class="header-anchor" href="#构建一个简单的键值数据库-simplekv"><span>构建一个简单的键值数据库 SimpleKV</span></a></h2><p>构建一个具有关键组件的键值数据库 SimpleKV，需要考虑 <strong>具备什么机制（能力）、基本组件</strong>。</p><h3 id="应具备什么机制-能力" tabindex="-1"><a class="header-anchor" href="#应具备什么机制-能力"><span>应具备什么机制（能力）？</span></a></h3><p>可以存哪些数据（<strong>数据模型</strong>）？</p><p>可以对数据做什么操作（<strong>操作接口</strong>）？</p><p>数据存储在哪里（<strong>存储位置</strong>）？</p><h4 id="数据模型" tabindex="-1"><a class="header-anchor" href="#数据模型"><span>数据模型</span></a></h4><p>实现 key-value 模型</p><p>Memcached 支持的 value 类型仅为 String 类型。</p><p>Redis 支持多样的 value 类型，包括了 String、哈希表、列表、集合等。</p><h4 id="操作接口" tabindex="-1"><a class="header-anchor" href="#操作接口"><span>操作接口</span></a></h4><p>实现增删改查操作接口，如下：</p><ul><li>PUT：新写入或更新一个 key-value 对；（需要分配和释放内存）</li><li>GET：根据一个 key 读取相应的 value 值；</li><li>DELETE：根据一个 key 删除整个 key-value 对；（需要分配和释放内存）</li><li>SCAN：查询一个 key 在相应条件内的数据；</li></ul><p><strong>具体逻辑：</strong></p><p>对于 GET/SCAN 操作而言，此时根据 value 的存储位置返回 value 值即可；</p><p>对于 PUT 一个新的键值对数据而言，SimpleKV 需要为该键值对分配内存空间；</p><p>对于 DELETE 操作，SimpleKV 需要删除键值对，并释放相应的内存空间，这个过程由分配器完成。</p><h4 id="存储位置" tabindex="-1"><a class="header-anchor" href="#存储位置"><span>存储位置</span></a></h4><p>内存</p><p>保存在内存：读写速度快（百ns），一旦掉电所有的数据都会丢失。</p><p>保存在外存：读写速度慢（几ms）可以避免数据丢失。</p><h3 id="应具备什么基本组件" tabindex="-1"><a class="header-anchor" href="#应具备什么基本组件"><span>应具备什么基本组件？</span></a></h3><p>一个键值数据库包括了 <strong>访问框架、索引模块、操作模块和存储模块</strong> 四部分。</p><p><img src="'+r+'" alt="SimpleKV的基本内部架构"></p><h4 id="访问模式" tabindex="-1"><a class="header-anchor" href="#访问模式"><span>访问模式</span></a></h4><p>提供键值操作的访问模式有两种：</p><ol><li>通过 <strong>函数库调用</strong> 的形式，比如上图的 libsimplekv.so，就是以动态链接库的形式链接到我们自己的程序中。</li><li>通过 <strong>网络框架以 Socket 通信</strong> 的形式，这种形式可以提供广泛的键值存储服务。</li></ol><p>比如：</p><p>RocksDB 是动态链接库形式</p><p>Memcached 和 Redis 是网络框架形式</p><h4 id="索引模块" tabindex="-1"><a class="header-anchor" href="#索引模块"><span>索引模块</span></a></h4><p>索引模块的作用是 <strong>如何定位键值对的位置</strong>，如何根据 key 找到相应 value 的存储位置，进而执行操作。</p><p><strong>索引的类型</strong></p><p>索引的类型有很多，常见的有哈希表、B+树、字典树等，不同的索引结构在性能、空间消耗、并发控制等方面具有不同的特征，不同键值数据库采用的索引并不相同。</p><p>例如：</p><p>Memcached 和 Redis 采用哈希表作为 key-value 索引。</p><p>RocksDB 则采用跳表作为内存中 key-value 的索引。</p><h3 id="如何实现重启后快速提供服务" tabindex="-1"><a class="header-anchor" href="#如何实现重启后快速提供服务"><span>如何实现重启后快速提供服务？</span></a></h3><h4 id="持久化功能" tabindex="-1"><a class="header-anchor" href="#持久化功能"><span>持久化功能</span></a></h4><p>考虑到磁盘管理复杂，SimpleKV 就直接采用了文件形式，将键值数据通过调用本地文件系统的操作接口保存在磁盘上</p><p>两种方式：</p><ul><li>对于每一个键值对，SimpleKV 都对其进行落盘保存；（性能影响大）</li><li>周期性地把内存中的键值数据保存到文件中；（性能影响小、有丢失风险）</li></ul><h3 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h3><p>至此，构造了一个简单的键值数据库 SimpleKV。</p><p><img src="'+n+'" alt="SimpleKV到Redis.png"></p><h4 id="simplekv和redis的区别" tabindex="-1"><a class="header-anchor" href="#simplekv和redis的区别"><span>SimpleKV和Redis的区别：</span></a></h4><p>Redis 主要通过网络框架进行访问，而不再是动态库了，这也使得 Redis 可以作为一个基础性的网络服务进行访问，扩大了 Redis 的应用范围。</p><p>Redis 数据模型中的 value 类型很丰富，因此也带来了更多的操作接口，例如面向列表的 LPUSH/LPOP，面向集合的 SADD/SREM 等</p><p>Redis 的持久化模块能支持两种方式：日志（AOF）和快照（RDB），这两种持久化方式具有不同的优劣势，影响到 Redis 的访问性能和可靠性。</p><p>SimpleKV 是个简单的单机键值数据库，Redis 中包含了集群功能支撑模块，所以支持高可靠集群和高可扩展集群。</p>',54)]))}const l=e(t,[["render",o],["__file","index.html.vue"]]),m=JSON.parse('{"path":"/middleware/redis/Redis%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/01%20%E5%9F%BA%E6%9C%AC%E6%9E%B6%E6%9E%84/","title":"01 基本架构","lang":"zh-CN","frontmatter":{"title":"01 基本架构","createTime":"2024/12/18 16:50:32","permalink":"/middleware/redis/Redis核心技术与实战/01 基本架构/"},"headers":[],"readingTime":{"minutes":3.71,"words":1112},"git":{"updatedTime":1735810282000,"contributors":[{"name":"houxiaobao","username":"houxiaobao","email":"","commits":5,"avatar":"https://avatars.githubusercontent.com/houxiaobao?v=4","url":"https://github.com/houxiaobao"},{"name":"houxiaobao","username":"houxiaobao","email":"xiaobaoword@163.com","commits":2,"avatar":"https://avatars.githubusercontent.com/houxiaobao?v=4","url":"https://github.com/houxiaobao"},{"name":"KOL标签化系统侯晓宝","username":"KOL标签化系统侯晓宝","email":"xiaobao@microdreams.comgit","commits":1,"avatar":"https://avatars.githubusercontent.com/KOL标签化系统侯晓宝?v=4","url":"https://github.com/KOL标签化系统侯晓宝"}]},"filePathRelative":"notes/middleware/redis/Redis核心技术与实战/01 基本架构.md","bulletin":false}');export{l as comp,m as data};
