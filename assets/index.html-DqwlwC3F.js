import{_ as s,c as E,a as p,o as n}from"./app-DNIo-6hg.js";const B="/images/basics/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2/1/2/%E8%BF%9B%E7%A8%8B%E7%9A%84%E7%BB%84%E6%88%90.png",r="/images/basics/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2/1/2/%E7%A8%8B%E5%BA%8F%E6%98%AF%E5%A6%82%E4%BD%95%E8%BF%90%E8%A1%8C%E7%9A%84.png",i="/images/basics/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2/1/2/%E8%BF%9B%E7%A8%8B%E7%9A%84%E7%89%B9%E5%BE%81.png",e="/images/basics/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2/1/3/%E5%88%9B%E5%BB%BA%E6%80%81.png",h="/images/basics/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2/1/3/%E8%BF%90%E8%A1%8C%E6%80%81.png",t="/images/basics/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2/1/3/%E9%98%BB%E5%A1%9E%E6%80%81.png",o="/images/basics/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2/1/3/%E7%BB%88%E6%AD%A2%E6%80%81.png",A="/images/basics/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2/1/3/%E8%BF%9B%E7%A8%8B%E6%98%AF%E5%A6%82%E4%BD%95%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2%E7%9A%84.png",c="/images/basics/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2/1/3/%E8%BF%9B%E7%A8%8B%E7%9A%84%E7%8A%B6%E6%80%81%E6%80%BB%E7%BB%931.png",d="/images/basics/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2/1/3/%E8%BF%9B%E7%A8%8B%E7%9A%84%E7%8A%B6%E6%80%81%E6%80%BB%E7%BB%932.png",l="/images/basics/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2/1/3/211%E8%BF%9B%E7%A8%8B%E7%9A%84%E7%BB%84%E7%BB%87-%E9%93%BE%E6%8E%A5%E6%96%B9%E5%BC%8F.png",g="/images/basics/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2/1/3/212%E8%BF%9B%E7%A8%8B%E7%9A%84%E7%BB%84%E7%BB%87-%E7%B4%A2%E5%BC%95%E6%96%B9%E5%BC%8F.png",m="/images/basics/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2/1/5/214%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1%E7%9B%B4%E6%8E%A5%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F.png",C="/images/basics/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2/1/5/215%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1%E9%97%B4%E6%8E%A5%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F.png",b="/images/basics/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2/1/5/216%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1-%E7%AE%A1%E9%81%93%E9%80%9A%E4%BF%A1.png",_="/images/basics/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2/1/6/%E5%BC%95%E5%85%A5%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%8F%98%E5%8C%96.png",F="/images/basics/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2/1/6/%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%B1%9E%E6%80%A7.png",D="/images/basics/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2/1/6/%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F.png",x="/images/basics/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2/1/6/%E5%86%85%E6%A0%B8%E7%BA%A7%E7%BA%BF%E7%A8%8B.png",f="/images/basics/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2/1/6/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B%E4%B8%80%E5%AF%B9%E4%B8%80.png",P="/images/basics/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2/1/6/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B%E5%A4%9A%E5%AF%B9%E4%B8%80.png",u="/images/basics/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2/1/6/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B%E5%A4%9A%E5%AF%B9%E5%A4%9A.png",U="/images/basics/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2/1/6/%E6%80%BB%E7%BB%93.png",I="/images/basics/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2/1/6/%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%BB%84%E7%BB%87%E4%B8%8E%E6%8E%A7%E5%88%B6.png",v="/images/basics/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2/1/6/%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%8A%B6%E6%80%81%E4%B8%8E%E8%BD%AC%E6%8D%A2.png",O={};function L(k,a){return n(),E("div",null,a[0]||(a[0]=[p('<h2 id="_2-1-1-进程的概念和特征" tabindex="-1"><a class="header-anchor" href="#_2-1-1-进程的概念和特征"><span>2.1.1 进程的概念和特征</span></a></h2><p>程序：是 <strong>静态的</strong> ，就是个存放在磁盘里的可执行文件，就是一系列的指令集合</p><p>进程（Process）：是 <strong>动态的</strong> ，是程序的一次执行过程</p><h2 id="_2-1-2-进程的组成" tabindex="-1"><a class="header-anchor" href="#_2-1-2-进程的组成"><span>2.1.2 进程的组成</span></a></h2><p>一个进程实体（进程映像）由 <strong>进程控制块（PCB）</strong> 、<strong>程序段</strong> 、<strong>数据段</strong> 组成</p><h3 id="进程控制块-pcb" tabindex="-1"><a class="header-anchor" href="#进程控制块-pcb"><span>进程控制块（PCB）</span></a></h3><p><strong>进程控制块（PCB）</strong> 是进程存在的唯一标志，当进程被创建时，操作系统为其创建PCB，当进程结束时，会回收PCB</p><p>当进程被创建时，操作系统会为该进程分配一个 <strong>唯一的、不重复</strong> 的“身份证号”-PID（Process ID，进程ID）</p><p>操作系统要记录PID、进程所属用户ID（UID）、进程资源分配（如：内存，I/O设备、文件），进程运行情况（如：CPU使用时间，磁盘使用情况，网络流量使用情况）等</p><p>这些信息都被保存在一个数据结构 PCB（Process Control Block）中，即 <strong>进程控制块</strong></p><h3 id="程序段" tabindex="-1"><a class="header-anchor" href="#程序段"><span>程序段</span></a></h3><p>程序的代码（指令序列）</p><h3 id="数据段" tabindex="-1"><a class="header-anchor" href="#数据段"><span>数据段</span></a></h3><p>运行过程中产生的各种数据（如：程序中定义的变量）</p><p><img src="'+B+'" alt="进程的组成"></p><h3 id="程序是如何运行的" tabindex="-1"><a class="header-anchor" href="#程序是如何运行的"><span>程序是如何运行的</span></a></h3><p><img src="'+r+'" alt="程序是如何运行的"></p><h3 id="常用寄存器" tabindex="-1"><a class="header-anchor" href="#常用寄存器"><span>常用寄存器</span></a></h3><h4 id="psw-程序状态字寄存器" tabindex="-1"><a class="header-anchor" href="#psw-程序状态字寄存器"><span>PSW：程序状态字寄存器</span></a></h4><p>存储 CPU 的运行状态信息（用户态|内核态）</p><h4 id="pc-程序计数器" tabindex="-1"><a class="header-anchor" href="#pc-程序计数器"><span>PC：程序计数器</span></a></h4><p>存储当前正在执行的指令地址和下一条执行的指令地址</p><h4 id="ir-指令寄存器" tabindex="-1"><a class="header-anchor" href="#ir-指令寄存器"><span>IR：指令寄存器</span></a></h4><p>存储当前正在执行的指令</p><h4 id="通用寄存器" tabindex="-1"><a class="header-anchor" href="#通用寄存器"><span>通用寄存器</span></a></h4><p>其他一些必要信息</p><p><img src="'+i+'" alt="进程的特征"></p><h2 id="_2-1-3-进程的状态与转换" tabindex="-1"><a class="header-anchor" href="#_2-1-3-进程的状态与转换"><span>2.1.3 进程的状态与转换</span></a></h2><h3 id="创建态" tabindex="-1"><a class="header-anchor" href="#创建态"><span>创建态</span></a></h3><p><img src="'+e+'" alt="创建态"></p><h3 id="运行态" tabindex="-1"><a class="header-anchor" href="#运行态"><span>运行态</span></a></h3><p><img src="'+h+'" alt="运行态"></p><h3 id="阻塞态" tabindex="-1"><a class="header-anchor" href="#阻塞态"><span>阻塞态</span></a></h3><p><img src="'+t+'" alt="阻塞态"></p><h3 id="终止态" tabindex="-1"><a class="header-anchor" href="#终止态"><span>终止态</span></a></h3><p><img src="'+o+'" alt="终止态"></p><h3 id="进程是如何状态转换的" tabindex="-1"><a class="header-anchor" href="#进程是如何状态转换的"><span>进程是如何状态转换的</span></a></h3><p><img src="'+A+'" alt="进程是如何状态转换的"></p><h3 id="进程的状态总结" tabindex="-1"><a class="header-anchor" href="#进程的状态总结"><span>进程的状态总结</span></a></h3><p><img src="'+c+'" alt="进程的状态总结1"></p><p><img src="'+d+'" alt="进程的状态总结2"></p><h3 id="进程的组织" tabindex="-1"><a class="header-anchor" href="#进程的组织"><span>进程的组织</span></a></h3><h4 id="链接方式" tabindex="-1"><a class="header-anchor" href="#链接方式"><span>链接方式</span></a></h4><p>按照进程状态将PCB分为多个队列</p><p>操作系统持有指向各个队列的指针</p><p><img src="'+l+'" alt="211进程的组织-链接方式"></p><h4 id="索引方式" tabindex="-1"><a class="header-anchor" href="#索引方式"><span>索引方式</span></a></h4><p>根据进程状态的不同，建立几张索引表</p><p>操作系统持有指向各个索引表的指针</p><p><img src="'+g+'" alt="212进程的组织-索引方式"></p><h2 id="_2-1-4-进程控制" tabindex="-1"><a class="header-anchor" href="#_2-1-4-进程控制"><span>2.1.4 进程控制</span></a></h2><p>进程控制的主要功能是对系统中的所有进程实施有效的管理，它具有创建新进程、撤销已有进程、实现进程状态转换等功能。</p><h3 id="如何实现进程控制" tabindex="-1"><a class="header-anchor" href="#如何实现进程控制"><span>如何实现进程控制</span></a></h3><p>使用 ”原语“ 实现，原语的执行具有原子性，期间不允许被中断</p><h3 id="原语的-原子性" tabindex="-1"><a class="header-anchor" href="#原语的-原子性"><span>原语的 ”原子性“</span></a></h3><p>通过 <strong>关中断指令</strong> 和 <strong>开中断指令</strong> 这两个 <strong>特权指令</strong> 实现 <strong>原子性</strong></p><h3 id="中断机制" tabindex="-1"><a class="header-anchor" href="#中断机制"><span>中断机制</span></a></h3><h4 id="关中断指令" tabindex="-1"><a class="header-anchor" href="#关中断指令"><span>关中断指令</span></a></h4><p>用于 <strong>禁用CPU响应中断请求</strong>，表示临时关闭中断系统，执行关中断指令后，CPU将不再响应外部中断信号，直到执行开中断指令。</p><p><strong>作用</strong>：防止在关键代码执行过程被中断打断，确保指令的原子性。</p><h4 id="开中断指令" tabindex="-1"><a class="header-anchor" href="#开中断指令"><span>开中断指令</span></a></h4><p>用于 <strong>重新启用CPU响应中断请求</strong>，表示允许中断系统正常工作，执行开中断指令后，处理器会检查和响应外部中断信号。</p><p><strong>作用</strong>：恢复对外部中断的响应</p><h4 id="中断机制的工作流程" tabindex="-1"><a class="header-anchor" href="#中断机制的工作流程"><span>中断机制的工作流程</span></a></h4><ol><li>外设或内部模块产生中断信号</li><li>如果中断被启用（CPU处于 <strong>开中断状态</strong>），中断控制器将信号传递给CPU。</li><li>CPU暂停当前任务，保存上下文，跳转到中断服务程序。</li><li>完成中断服务后，恢复上下文，继续执行被中断的任务。</li></ol><p>CPU 会按程序的 <strong>指令序列</strong> 依次执行指令，每执行完一条指令都会例行检查是否有中断信号需要处理，如果有，则暂停运行当前程序，执行 <strong>关中断指令</strong>，转而执行中断程序，，等中断程序处理完之后，会执行 <strong>开中断指令</strong>，并且回到原来程序继续往下执行。</p><p><strong>注意</strong>：在中断程序的执行过程中，不需要再例行检查中断信号了，因为已经执行 <strong>关中断指令</strong> 了，等待当前中断程序处理完之后，回到程序后，再次出现外部中断信号，则继续去执行中断程序。</p><h2 id="_2-1-5-进程通信" tabindex="-1"><a class="header-anchor" href="#_2-1-5-进程通信"><span>2.1.5 进程通信</span></a></h2><h3 id="为什么需要进程通信" tabindex="-1"><a class="header-anchor" href="#为什么需要进程通信"><span>为什么需要进程通信？</span></a></h3><p>进程是分配系统资源的单位（包括内存地址空间），每个进程都拥有独立的内存地址空间和资源。因此访问其他进程的数据是不可能的，为了实现进程之间的数据交换，他们必须通过进程通信机制来实现。</p><h3 id="通信方式" tabindex="-1"><a class="header-anchor" href="#通信方式"><span>通信方式</span></a></h3><h4 id="共享存储-共享内存" tabindex="-1"><a class="header-anchor" href="#共享存储-共享内存"><span>共享存储（共享内存）</span></a></h4><p>共享存储允许多个进程映射到同一块内存区域，从而直接访问和修改内存中的数据。</p><p>为避免出错，各个进程对共享空间的访问应该是互斥的，各个进程可使用操作系统内核提供的同步互斥工具（如P、V操作）</p><h5 id="基于数据结构" tabindex="-1"><a class="header-anchor" href="#基于数据结构"><span>基于数据结构</span></a></h5><p>比如共享空间里只能放一个长度为10的数组，这种共享方式速度慢、限制多，是一种低级通信方式</p><h5 id="基于存储区" tabindex="-1"><a class="header-anchor" href="#基于存储区"><span>基于存储区</span></a></h5><p>操作系统在内存中划出一块恭喜那个存储区，数据的形式、存放位置都由通信进程控制，而不是操作系统。这种共享方式速度很快，是一种高级通信方式。</p><h4 id="消息队列" tabindex="-1"><a class="header-anchor" href="#消息队列"><span>消息队列</span></a></h4><p>进程间的数据交换以 **格式化的消息（Message）**为单位。进程通过操作系统提供的“发送消息/接收消息”两个原语进行数据交换</p><h5 id="直接通信方式" tabindex="-1"><a class="header-anchor" href="#直接通信方式"><span>直接通信方式</span></a></h5><p>消息发送进程要指明接收进程的ID</p><p>在直接通信方式中，消息队列的发送者和接受者是直接连接的，即每个消息都由一个明确的发送者和接受者。消息的传递是点对点的，发送者将消息发送到接受者的消息队列，接受者从消息队列中取出消息。</p><p><strong>特点：</strong></p><ul><li><p>点对点通信：每条消息只能由一个接受者接收</p></li><li><p>发送者和接收者明确，发送方和接收方需要显式的指定对方标识。</p></li><li><p>实时性强，接收方从消息队列中获取消息时，是直接与发送方对应的，通信较为直接和快速</p></li></ul><p><strong>使用场景：</strong></p><ul><li>请求-响应模式：例如，在客户端与服务器之间进行通信时，客户端发送请求消息，服务器返回响应消息，采用直接通信方式。</li><li>命令通知：例如，发送系统命令或操作指令给特定的进程或服务。</li></ul><p><img src="'+m+'" alt="214进程通信直接通信方式"></p><h5 id="间接通信方式-信箱通信方式" tabindex="-1"><a class="header-anchor" href="#间接通信方式-信箱通信方式"><span>间接通信方式（信箱通信方式）</span></a></h5><p>通过“信箱”间接地通信，因此又称“信息通信方式”</p><p>在间接通信方式中，消息并不直接从发送者传递到接收者，而是通过一个中间的消息队列或消息交换代理来转发。消息首先进入一个中介的消息队列，接收者从该中介队列中读取消息。发送者和接收者之间不需要直接对接，消息队列作为一个“中介”角色存在。</p><p><strong>特点：</strong></p><ul><li><p>广播式通信：一条消息可以发送给多个接收者（取决于消息队列的设计）。</p></li><li><p>解耦性强：发送者与接收者之间不直接关联，发送者只需将消息放入消息队列，接收者从消息队列获取消息。这种方式使得发送者与接收者之间实现了解耦。</p></li><li><p>异步通信：发送者发送消息后不需要等待接收者的响应，接收者可以在任意时间处理消息，适合异步处理任务。</p></li></ul><p><img src="'+C+'" alt="215进程通信间接通信方式"></p><h4 id="管道通信" tabindex="-1"><a class="header-anchor" href="#管道通信"><span>管道通信</span></a></h4><p>管道只能采用 <strong>半双工通信</strong>，某一时间段内只能实现单向的传输。如果要实现 双向同时通信，则需要设置两个管道。</p><p>各进程要互斥地访问管道（由操作系统实现）。</p><p>当管道写满时，写进程将阻塞，知道读进程将管道中的数据取走，即可唤醒写进程。</p><p>当管道读空时，读进程将阻塞，知道写进程往管道中写入数据，即可唤醒读进程。</p><p>管道中的数据一旦被读出，就彻底消失。因此，当多个进程读同一个管道时，可能会错乱。对此，通常有两种解决方案：1. 一个管道允许多个写进程，一个读进程（2014408真题高教社官方答案）；2. 允许有多个写进程，多个读进程，但系统会让各个读进程轮流从管道中读数据（Linux方案）</p><p><img src="'+b+'" alt="216进程通信-管道通信"></p><h2 id="_2-1-6-线程和多线程模型" tabindex="-1"><a class="header-anchor" href="#_2-1-6-线程和多线程模型"><span>2.1.6 线程和多线程模型</span></a></h2><h3 id="_1-线程的基本概念" tabindex="-1"><a class="header-anchor" href="#_1-线程的基本概念"><span>1. 线程的基本概念</span></a></h3><p>引入进程的目的是更好地使多道程序并发执行，提高资源利用率和系统吞吐量；</p><p>引入线程 (Threads)的目的则是减小程序在并发执行时所付出的时空开销，提高操作系统的并发性能。</p><p>线程最直接的理解就是 <strong>轻量级进程</strong>，它是 <strong>一个基本的CPU执行单元</strong>，也是程序执行流的最小单元，由 <strong>线程ID、程序计数器、寄存器</strong> 集合和堆栈组成。</p><p>线程是进程中的一个实体，是被系统 <strong>独立调度</strong> 和 <strong>分派</strong> 的基本单位，线程自己不拥有系统资源，只拥有一点儿在运行中必不可少的资源，但它可与同属一个进程的其他线程共享进程所拥有的全部资源。</p><p>一个线程可以创建和撤销另一个线程，同一进程中的多个线程之间可以并发执行。由于线程之间的相互制约，致使线程在运行中呈现出间断性。线程也有 <strong>就绪、阻塞和运行</strong> 三种基本状态。</p><h3 id="_2-进程和线程的比较" tabindex="-1"><a class="header-anchor" href="#_2-进程和线程的比较"><span>2. 进程和线程的比较</span></a></h3><p><strong>调度：</strong></p><p>在传统的操作系统中，拥有资源和独立调度的基本单位都是进程，每次调度都要进行上下文切换，开销较大。</p><p>在引入线程的操作系统中，线程是独立调度的基本单位，而线程切换的代价远低于进程。</p><p>在同一进程中，线程的切换不会引起进程切换。但从一个进程中的线程切换到另一个进程中的线程时，会引起进程切换。</p><p><strong>并发性</strong></p><p>在引入线程的操作系统中，不仅进程之间可以并发执行，而且一个进程中的多个线程之间亦可并发执行，甚至不同进程中的线程也能并发执行，从而使操作系统具有更好的并发性，提高了系统资源的利用率和系统的吞吐量。</p><p><strong>拥有资源</strong></p><p>进程是系统中拥有资源的基本单位，而线程不拥有系统资源，但线程可以访问其隶属进程的系统资源，这主要表现在属于同一进程的所有线程都具有相同的地址空间。要知道，若线程也是拥有资源的单位，则切换线程就需要较大的时空开销，线程这个概念的提出就没有意义。</p><p><strong>独立性</strong></p><p>每个进程都拥有独立的地址空间和资源，除了共享全局变量，不允许其他进程访问。</p><p>某个进程中的线程对其他进程不可见。同一进程中的不同线程是为了提高并发性及进行相互之间的合作而创建的，它们共享进程的地址空间和资源。</p><p><strong>系统开销</strong></p><p>在创建或撤销进程时，系统都要为之分配或回收进程控制块 PCB 及其他资源， 如内存空间、I/O 设备等。</p><p>操作系统为此所付出的开销，明显大于创建或撤销线程时的开销。</p><p>进程切换时涉及进程上下文的切换，而线程切换时只需保存和设置少量寄存器内容，开销很小。</p><p>此外，由于同一进程内的多个线程共享进程的地址空间，因此这些线程之间的同步与通信非常容易实现，甚至无须操作系统的干预。</p><p><strong>支持多处理器系统</strong></p><p>对于传统单线程进程，不管有多少个 CPU，进程只能运行在一个 CPU 上。</p><p>对于多线程进程，可将进程中的多个线程分配到多个 CPU 上执行。</p><p><img src="'+_+'" alt="引入线程的变化"></p><h3 id="线程的属性" tabindex="-1"><a class="header-anchor" href="#线程的属性"><span>线程的属性</span></a></h3><ol><li><p>线程是一个轻型实体，它不拥有系统资源，但每个线程都应有一个唯一的标识符和一个线程控制块，线程控制块记录线程执行的寄存器和栈等现场状态。</p></li><li><p>不同的线程可以执行相同的程序，即同一个服务程序被不同的用户调用时，操作系统将它们创建成不同的线程。</p></li><li><p>同一进程中的各个线程共享该进程所拥有的资源。</p></li><li><p>线程是CPU的独立调度单位，多个线程是可以并发执行的。在单CPU的计算机系统中，各线程可交替地占用CPU，在多CPU的计算机系统中，各线程可同时占用不同的CPU，若各个CPU同时为一个进程内的各线程服务，则可缩短进程的处理时间。</p></li><li><p>一个线程被创建后，便开始了它的生命周期，直至终止。线程在生命周期内会经历阻塞态、就绪态和运行态等各种状态变化。</p></li></ol><p><img src="'+F+'" alt="线程的属性"></p><h3 id="线程的实现方式" tabindex="-1"><a class="header-anchor" href="#线程的实现方式"><span>线程的实现方式</span></a></h3><h4 id="用户级线程" tabindex="-1"><a class="header-anchor" href="#用户级线程"><span>用户级线程</span></a></h4><ol><li><p>线程的管理工作由谁来完成？</p></li><li><p>线程切换是否需要 CPU 变态？</p></li><li><p>操作系统是否能意识到用户级线程的存在？</p></li><li><p>这种线程的实现方式有什么优点和缺点？</p></li></ol><p><img src="'+D+'" alt="线程的实现方式"></p><h4 id="内核级线程" tabindex="-1"><a class="header-anchor" href="#内核级线程"><span>内核级线程</span></a></h4><ol><li><p>线程的管理工作由谁来完成？</p></li><li><p>线程切换是否需要 CPU 变态？</p></li><li><p>操作系统是否能意识到内核级线程的存在？</p></li><li><p>这种线程的实现方式有什么优点和缺点？</p></li></ol><p><img src="'+x+'" alt="内核级线程"></p><h4 id="多线程模型" tabindex="-1"><a class="header-anchor" href="#多线程模型"><span>多线程模型</span></a></h4><h4 id="一对一模型" tabindex="-1"><a class="header-anchor" href="#一对一模型"><span>一对一模型</span></a></h4><p><img src="'+f+'" alt="多线程模型一对一"></p><h4 id="多对一模型" tabindex="-1"><a class="header-anchor" href="#多对一模型"><span>多对一模型</span></a></h4><p><img src="'+P+'" alt="多线程模型多对一"></p><h4 id="多对多模型" tabindex="-1"><a class="header-anchor" href="#多对多模型"><span>多对多模型</span></a></h4><p><img src="'+u+'" alt="多线程模型多对多"></p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p><img src="'+U+'" alt="总结"></p><h3 id="线程的组织与控制" tabindex="-1"><a class="header-anchor" href="#线程的组织与控制"><span>线程的组织与控制</span></a></h3><p><img src="'+I+'" alt="线程的组织与控制"></p><p><img src="'+v+'" alt="线程的状态与转换"></p>',151)]))}const T=s(O,[["render",L],["__file","index.html.vue"]]),w=JSON.parse('{"path":"/basics/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%AC%AC2%E7%AB%A0%20%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/2.1%20%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/","title":"2.1 进程与线程","lang":"zh-CN","frontmatter":{"title":"2.1 进程与线程","createTime":"2024/12/18 10:40:11","permalink":"/basics/计算机操作系统/第2章 进程与线程/2.1 进程与线程/"},"headers":[],"readingTime":{"minutes":14.18,"words":4254},"git":{"updatedTime":1735210843000,"contributors":[{"name":"houxiaobao","username":"houxiaobao","email":"","commits":5,"avatar":"https://avatars.githubusercontent.com/houxiaobao?v=4","url":"https://github.com/houxiaobao"},{"name":"KOL标签化系统侯晓宝","username":"KOL标签化系统侯晓宝","email":"xiaobao@microdreams.comgit","commits":1,"avatar":"https://avatars.githubusercontent.com/KOL标签化系统侯晓宝?v=4","url":"https://github.com/KOL标签化系统侯晓宝"}]},"filePathRelative":"notes/basics/计算机操作系统/第2章 进程与线程/2.1 进程与线程.md","categoryList":[{"id":"4358b5","sort":10000,"name":"notes"},{"id":"d5491b","sort":10002,"name":"basics"},{"id":"0783c8","sort":10003,"name":"计算机操作系统"},{"id":"eb6777","sort":10004,"name":"第2章 进程与线程"}],"bulletin":false}');export{T as comp,w as data};
